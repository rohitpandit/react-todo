[{"/home/rohit/dev/react-small-projects/todo-react/src/index.js":"1","/home/rohit/dev/react-small-projects/todo-react/src/App.js":"2","/home/rohit/dev/react-small-projects/todo-react/src/components/TodoItem.js":"3"},{"size":244,"mtime":1611304483781,"results":"4","hashOfConfig":"5"},{"size":3955,"mtime":1611329163021,"results":"6","hashOfConfig":"5"},{"size":762,"mtime":1611312515699,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1t4tcj",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/rohit/dev/react-small-projects/todo-react/src/index.js",[],["17","18"],"/home/rohit/dev/react-small-projects/todo-react/src/App.js",["19","20"],"import React, { useState } from 'react';\nimport TodoItem from './components/TodoItem';\nimport {\n\tButton,\n\tContainer,\n\tRow,\n\tCol,\n\tForm,\n\tListGroup,\n\tAlert,\n} from 'react-bootstrap';\n\nconst App = () => {\n\tconst [todoList, setTodoList] = useState([]);\n\tconst [input, setInput] = useState('');\n\tconst [errorMessage, setErrorMessage] = useState(''); //for showing error and success\n\tconst [successMessage, setSuccessMessage] = useState('');\n\tconst [filter, setFilter] = useState('all');\n\n\tconst filterHandler = (e) => {\n\t\tsetFilter(e.target.value);\n\t};\n\n\t//Mark as Done\n\tconst markDone = (id) => {\n\t\tconst newList = todoList.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.done = true;\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\n\t\tsetTodoList(newList);\n\t\tsetSuccessMessage('Marked as Done');\n\t\tsetTimeout(() => setSuccessMessage(''), 3000);\n\t\treturn;\n\t};\n\n\t//Delete todo handler\n\tconst deleteTodo = (id) => {\n\t\tconsole.log('delete');\n\t\tconst newList = todoList.filter((todo) => todo.id !== id);\n\t\tsetTodoList(newList);\n\t\tsetSuccessMessage('Deleted Successfully!');\n\t\tsetTimeout(() => setSuccessMessage(''), 3000);\n\t\treturn;\n\t};\n\n\t//Form submit handler\n\tconst submitHandler = (e) => {\n\t\te.preventDefault();\n\n\t\t//check if the input is empty\n\t\tif (input.trim() === '') {\n\t\t\tsetErrorMessage('Task cannot be empty');\n\t\t\tsetTimeout(() => setErrorMessage(''), 3000);\n\t\t\treturn;\n\t\t}\n\n\t\tlet newList = [];\n\t\tlet newValue = {};\n\t\tnewValue.text = input;\n\t\tnewValue.done = false;\n\t\tnewValue.id = Date.now();\n\n\t\tif (todoList.length === 0) {\n\t\t\tnewList.push(newValue);\n\t\t} else {\n\t\t\tnewList = [...todoList];\n\t\t\tnewList.unshift(newValue);\n\t\t}\n\t\tsetInput('');\n\t\tconsole.log(newList);\n\t\tsetTodoList(newList);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Row className='justify-content-md-center'>\n\t\t\t\t<h1>React ToDo app</h1>\n\t\t\t</Row>\n\t\t\t<hr />\n\t\t\t{errorMessage && (\n\t\t\t\t<Alert variant='danger'>\n\t\t\t\t\t<i className='fas fa-info-circle'></i> {errorMessage}\n\t\t\t\t</Alert>\n\t\t\t)}\n\t\t\t{successMessage && (\n\t\t\t\t<Alert variant='success'>\n\t\t\t\t\t<i className='fas fa-info-circle'></i> {successMessage}\n\t\t\t\t</Alert>\n\t\t\t)}\n\t\t\t<Row>\n\t\t\t\t<Col md={5}>\n\t\t\t\t\t<Form onSubmit={submitHandler}>\n\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tplaceholder='Add tasks....'\n\t\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t<Button type='submit' variant='primary' className='btn btn-block'>\n\t\t\t\t\t\t\t\tAdd Task\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t\t<Col md={7}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tonChange={filterHandler}\n\t\t\t\t\t\t\t\tdefaultValue='all'\n\t\t\t\t\t\t\t\tas='select'>\n\t\t\t\t\t\t\t\t<option value='all'>All Tasks</option>\n\t\t\t\t\t\t\t\t<option value='done'>Completed Tasks</option>\n\t\t\t\t\t\t\t\t<option value='not-done'>Uncomplete Tasks</option>\n\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Row>\n\t\t\t\t\t{todoList.length === 0 ? (\n\t\t\t\t\t\t<p>No task added</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ListGroup variant='flush'>\n\t\t\t\t\t\t\t{filter === 'all'\n\t\t\t\t\t\t\t\t? todoList.map((todo) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<TodoItem\n\t\t\t\t\t\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\t\t\t\t\t\tdeleteTodo={deleteTodo}\n\t\t\t\t\t\t\t\t\t\t\t\tmarkDone={markDone}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: filter === 'done'\n\t\t\t\t\t\t\t\t? todoList.map((todo) => {\n\t\t\t\t\t\t\t\t\t\tif (todo.done === true) {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TodoItem\n\t\t\t\t\t\t\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteTodo={deleteTodo}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmarkDone={markDone}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: todoList.map((todo) => {\n\t\t\t\t\t\t\t\t\t\tif (todo.done === false) {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TodoItem\n\t\t\t\t\t\t\t\t\t\t\t\t\ttodo={todo}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={todo.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteTodo={deleteTodo}\n\t\t\t\t\t\t\t\t\t\t\t\t\tmarkDone={markDone}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t  })}\n\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nexport default App;\n","/home/rohit/dev/react-small-projects/todo-react/src/components/TodoItem.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":151,"column":11,"nodeType":"29","messageId":"30","endLine":151,"endColumn":18},{"ruleId":"27","severity":1,"message":"28","line":164,"column":11,"nodeType":"29","messageId":"30","endLine":164,"endColumn":18},{"ruleId":"23","replacedBy":"31"},{"ruleId":"25","replacedBy":"32"},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",["33"],["34"],"no-global-assign","no-unsafe-negation"]